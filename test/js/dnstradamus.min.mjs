/*dnstradamus 1.0.2*/
const e=e=>{const t=e.split("/");return`${t[0]}//${t[2]}/`},t=e=>{let t=document.createElement("link");t.rel="dns-prefetch",t.href=e,document.head.appendChild(t)};export default function(n){const o={context:"body",include:(e,t)=>!0,timeout:4e3,observeChanges:!1,observeRoot:"body",bailIfSlow:!1,...n},r=`${o.context} a[href^="http://"],a[href^="https://"]`;if("IntersectionObserver"in window&&"IntersectionObserverEntry"in window&&!1===("connection"in navigator?navigator.connection.saveData:!1===/^(3|4)g$/i.test("connection"in navigator?navigator.connection.effectiveType:"4g"))){let n=[],i=new IntersectionObserver((r,i)=>{r.forEach(r=>{if(!0===r.isIntersecting){let l=r.target,s=e(l.href);-1===n.indexOf(s)&&-1===s.indexOf(`${document.location.protocol}//${document.location.host}`)&&!0===o.include(l,s)&&(o.timeout>0&&"requestIdleCallback"in window?requestIdleCallback(()=>t(s),{timeout:o.timeout}):t(s),n.push(s)),i.unobserve(l),c=c.filter(e=>e!==l)}})}),c=[].slice.call(document.querySelectorAll(r));c.forEach(e=>i.observe(e)),"MutationObserver"in window&&!0===o.observeChanges&&new MutationObserver(t=>t.forEach(()=>{[].slice.call(document.querySelectorAll(r)).forEach(t=>{-1===c.indexOf(t)&&-1===n.indexOf(e(t.href))&&(c.push(t),i.observe(t))})})).observe(document.querySelector(o.observeRoot),{childList:!0,subtree:!0})}}
