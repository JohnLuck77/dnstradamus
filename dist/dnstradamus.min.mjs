export default function(e){const t=(e=e||{}).context||"body",n=e.include||((e,t)=>!0),o="timeout"in e?e.timeout:4e3,i=e.observeChanges||!1,r=document,c=window,l=navigator,s="IntersectionObserver",a="MutationObserver",f="requestIdleCallback",h=[],d=e=>h.slice.call(r.querySelectorAll(e||t+' a[href^="http://"],a[href^="https://"]')),u=e=>{let t=r.createElement("link");t.href=e,t.rel="dns-prefetch",r.head.appendChild(t)},b=e=>{const t=e.split("/");return t[0]+"//"+t[2]+"/"};if(s in c&&s+"Entry"in c&&0==("connection"in l&&l.connection.saveData)){let e=[],l=new c[s]((t,s)=>{t.forEach(t=>{if(t.intersectionRatio){let a=t.target,d=b(a.href);e.indexOf(d)<0&&d.indexOf(r.location.protocol+"//"+r.location.host)<0&&n(a,d)&&(o&&f in c?c[f](()=>{u(d)},{timeout:o}):u(d),e.push(d)),s.unobserve(a),(h=h.filter(e=>e!=a)).length||i||l.disconnect()}})}),h=d();for(let e in h)l.observe(h[e]);a in c&&i&&new c[a](t=>{d().forEach(t=>{h.indexOf(t)<0&&e.indexOf(b(t.href))<0&&(h.push(t),l.observe(t))})}).observe(d(t)[0],{childList:!0,subtree:!0})}}
